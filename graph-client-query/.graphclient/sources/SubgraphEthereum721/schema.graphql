schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  contract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): contract
  contracts(
    skip: Int = 0
    first: Int = 100
    orderBy: contract_orderBy
    orderDirection: OrderDirection
    where: contract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [contract!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: account_orderBy
    orderDirection: OrderDirection
    where: account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [account!]!
  collection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): collection
  collections(
    skip: Int = 0
    first: Int = 100
    orderBy: collection_orderBy
    orderDirection: OrderDirection
    where: collection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [collection!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: token_orderBy
    orderDirection: OrderDirection
    where: token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [token!]!
  accountCollection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): accountCollection
  accountCollections(
    skip: Int = 0
    first: Int = 100
    orderBy: accountCollection_orderBy
    orderDirection: OrderDirection
    where: accountCollection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [accountCollection!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: transaction_orderBy
    orderDirection: OrderDirection
    where: transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [transaction!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: transfer_orderBy
    orderDirection: OrderDirection
    where: transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [transfer!]!
  sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sale
  sales(
    skip: Int = 0
    first: Int = 100
    orderBy: sale_orderBy
    orderDirection: OrderDirection
    where: sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sale!]!
  currency(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): currency
  currencies(
    skip: Int = 0
    first: Int = 100
    orderBy: currency_orderBy
    orderDirection: OrderDirection
    where: currency_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [currency!]!
  hourlyCollectionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): hourlyCollectionSnapshot
  hourlyCollectionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: hourlyCollectionSnapshot_orderBy
    orderDirection: OrderDirection
    where: hourlyCollectionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [hourlyCollectionSnapshot!]!
  dailyCollectionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): dailyCollectionSnapshot
  dailyCollectionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: dailyCollectionSnapshot_orderBy
    orderDirection: OrderDirection
    where: dailyCollectionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [dailyCollectionSnapshot!]!
  weeklyCollectionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): weeklyCollectionSnapshot
  weeklyCollectionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: weeklyCollectionSnapshot_orderBy
    orderDirection: OrderDirection
    where: weeklyCollectionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [weeklyCollectionSnapshot!]!
  wethTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): wethTransaction
  wethTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: wethTransaction_orderBy
    orderDirection: OrderDirection
    where: wethTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [wethTransaction!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  contract(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): contract
  contracts(
    skip: Int = 0
    first: Int = 100
    orderBy: contract_orderBy
    orderDirection: OrderDirection
    where: contract_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [contract!]!
  account(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: account_orderBy
    orderDirection: OrderDirection
    where: account_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [account!]!
  collection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): collection
  collections(
    skip: Int = 0
    first: Int = 100
    orderBy: collection_orderBy
    orderDirection: OrderDirection
    where: collection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [collection!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: token_orderBy
    orderDirection: OrderDirection
    where: token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [token!]!
  accountCollection(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): accountCollection
  accountCollections(
    skip: Int = 0
    first: Int = 100
    orderBy: accountCollection_orderBy
    orderDirection: OrderDirection
    where: accountCollection_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [accountCollection!]!
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: transaction_orderBy
    orderDirection: OrderDirection
    where: transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [transaction!]!
  transfer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): transfer
  transfers(
    skip: Int = 0
    first: Int = 100
    orderBy: transfer_orderBy
    orderDirection: OrderDirection
    where: transfer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [transfer!]!
  sale(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): sale
  sales(
    skip: Int = 0
    first: Int = 100
    orderBy: sale_orderBy
    orderDirection: OrderDirection
    where: sale_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [sale!]!
  currency(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): currency
  currencies(
    skip: Int = 0
    first: Int = 100
    orderBy: currency_orderBy
    orderDirection: OrderDirection
    where: currency_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [currency!]!
  hourlyCollectionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): hourlyCollectionSnapshot
  hourlyCollectionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: hourlyCollectionSnapshot_orderBy
    orderDirection: OrderDirection
    where: hourlyCollectionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [hourlyCollectionSnapshot!]!
  dailyCollectionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): dailyCollectionSnapshot
  dailyCollectionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: dailyCollectionSnapshot_orderBy
    orderDirection: OrderDirection
    where: dailyCollectionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [dailyCollectionSnapshot!]!
  weeklyCollectionSnapshot(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): weeklyCollectionSnapshot
  weeklyCollectionSnapshots(
    skip: Int = 0
    first: Int = 100
    orderBy: weeklyCollectionSnapshot_orderBy
    orderDirection: OrderDirection
    where: weeklyCollectionSnapshot_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [weeklyCollectionSnapshot!]!
  wethTransaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): wethTransaction
  wethTransactions(
    skip: Int = 0
    first: Int = 100
    orderBy: wethTransaction_orderBy
    orderDirection: OrderDirection
    where: wethTransaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [wethTransaction!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type account {
  """ the wallet address """
  id: ID!
  """ The NFTs owned by this account """
  tokens(skip: Int = 0, first: Int = 100, orderBy: token_orderBy, orderDirection: OrderDirection, where: token_filter): [token!]!
  """ The transfers originating from this account """
  transfersFrom(skip: Int = 0, first: Int = 100, orderBy: transfer_orderBy, orderDirection: OrderDirection, where: transfer_filter): [transfer!]!
  """ The transfers recevied by this account"""
  transfersTo(skip: Int = 0, first: Int = 100, orderBy: transfer_orderBy, orderDirection: OrderDirection, where: transfer_filter): [transfer!]!
  """ M:M relationship for Accounts and Collections """
  accountCollection(skip: Int = 0, first: Int = 100, orderBy: accountCollection_orderBy, orderDirection: OrderDirection, where: accountCollection_filter): [accountCollection!]!
}

type accountCollection {
  """ Account Id - Collection Id """
  id: ID!
  """ Address of the account """
  account: account
  """ Address of the NFT Collection """
  collection: collection
  """ Count of NFT's owned in a collection by the Address"""
  tokenCount: Int!
}

input accountCollection_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  account: String
  account_not: String
  account_gt: String
  account_lt: String
  account_gte: String
  account_lte: String
  account_in: [String!]
  account_not_in: [String!]
  account_contains: String
  account_contains_nocase: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_: account_filter
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: collection_filter
  tokenCount: Int
  tokenCount_not: Int
  tokenCount_gt: Int
  tokenCount_lt: Int
  tokenCount_gte: Int
  tokenCount_lte: Int
  tokenCount_in: [Int!]
  tokenCount_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [accountCollection_filter]
  or: [accountCollection_filter]
}

enum accountCollection_orderBy {
  id
  account
  account__id
  collection
  collection__id
  collection__name
  collection__symbol
  collection__totalSupply
  collection__mintPrice
  collection__supportsMetadata
  collection__totalSales
  collection__totalVolume
  collection__topSale
  tokenCount
}

input account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  tokens_: token_filter
  transfersFrom_: transfer_filter
  transfersTo_: transfer_filter
  accountCollection_: accountCollection_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [account_filter]
  or: [account_filter]
}

enum account_orderBy {
  id
  tokens
  transfersFrom
  transfersTo
  accountCollection
}

"""replaces TokenRegistry"""
type collection {
  """ The address of the collection """
  id: ID!
  """ The name of the collection """
  name: String
  """ The symbol for the collection """
  symbol: String
  """ Total Supply of Tokens """
  totalSupply: BigInt
  """ Mint Price """
  mintPrice: BigDecimal
  """ Tokens for the collection"""
  tokens(skip: Int = 0, first: Int = 100, orderBy: token_orderBy, orderDirection: OrderDirection, where: token_filter): [token!]!
  """ Collection supports metadata """
  supportsMetadata: Boolean
  """ Total sales """
  totalSales: Int!
  """ Total volume """
  totalVolume: BigDecimal!
  """ Top Sale ever """
  topSale: BigDecimal!
  """ Hourly info about the collection """
  hourlyCollectionSnapshot(skip: Int = 0, first: Int = 100, orderBy: hourlyCollectionSnapshot_orderBy, orderDirection: OrderDirection, where: hourlyCollectionSnapshot_filter): [hourlyCollectionSnapshot!]!
  """ Daily info about the collection """
  dailyCollectionSnapshot(skip: Int = 0, first: Int = 100, orderBy: dailyCollectionSnapshot_orderBy, orderDirection: OrderDirection, where: dailyCollectionSnapshot_filter): [dailyCollectionSnapshot!]!
  """ Weekly info about the collection """
  weeklyCollectionSnapshot(skip: Int = 0, first: Int = 100, orderBy: weeklyCollectionSnapshot_orderBy, orderDirection: OrderDirection, where: weeklyCollectionSnapshot_filter): [weeklyCollectionSnapshot!]!
  """ M:M relationship for Accounts and Collections """
  accountCollection(skip: Int = 0, first: Int = 100, orderBy: accountCollection_orderBy, orderDirection: OrderDirection, where: accountCollection_filter): [accountCollection!]!
}

input collection_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  totalSupply: BigInt
  totalSupply_not: BigInt
  totalSupply_gt: BigInt
  totalSupply_lt: BigInt
  totalSupply_gte: BigInt
  totalSupply_lte: BigInt
  totalSupply_in: [BigInt!]
  totalSupply_not_in: [BigInt!]
  mintPrice: BigDecimal
  mintPrice_not: BigDecimal
  mintPrice_gt: BigDecimal
  mintPrice_lt: BigDecimal
  mintPrice_gte: BigDecimal
  mintPrice_lte: BigDecimal
  mintPrice_in: [BigDecimal!]
  mintPrice_not_in: [BigDecimal!]
  tokens_: token_filter
  supportsMetadata: Boolean
  supportsMetadata_not: Boolean
  supportsMetadata_in: [Boolean!]
  supportsMetadata_not_in: [Boolean!]
  totalSales: Int
  totalSales_not: Int
  totalSales_gt: Int
  totalSales_lt: Int
  totalSales_gte: Int
  totalSales_lte: Int
  totalSales_in: [Int!]
  totalSales_not_in: [Int!]
  totalVolume: BigDecimal
  totalVolume_not: BigDecimal
  totalVolume_gt: BigDecimal
  totalVolume_lt: BigDecimal
  totalVolume_gte: BigDecimal
  totalVolume_lte: BigDecimal
  totalVolume_in: [BigDecimal!]
  totalVolume_not_in: [BigDecimal!]
  topSale: BigDecimal
  topSale_not: BigDecimal
  topSale_gt: BigDecimal
  topSale_lt: BigDecimal
  topSale_gte: BigDecimal
  topSale_lte: BigDecimal
  topSale_in: [BigDecimal!]
  topSale_not_in: [BigDecimal!]
  hourlyCollectionSnapshot_: hourlyCollectionSnapshot_filter
  dailyCollectionSnapshot_: dailyCollectionSnapshot_filter
  weeklyCollectionSnapshot_: weeklyCollectionSnapshot_filter
  accountCollection_: accountCollection_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [collection_filter]
  or: [collection_filter]
}

enum collection_orderBy {
  id
  name
  symbol
  totalSupply
  mintPrice
  tokens
  supportsMetadata
  totalSales
  totalVolume
  topSale
  hourlyCollectionSnapshot
  dailyCollectionSnapshot
  weeklyCollectionSnapshot
  accountCollection
}

type contract {
  id: ID!
  asERC721: collection
}

input contract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  asERC721: String
  asERC721_not: String
  asERC721_gt: String
  asERC721_lt: String
  asERC721_gte: String
  asERC721_lte: String
  asERC721_in: [String!]
  asERC721_not_in: [String!]
  asERC721_contains: String
  asERC721_contains_nocase: String
  asERC721_not_contains: String
  asERC721_not_contains_nocase: String
  asERC721_starts_with: String
  asERC721_starts_with_nocase: String
  asERC721_not_starts_with: String
  asERC721_not_starts_with_nocase: String
  asERC721_ends_with: String
  asERC721_ends_with_nocase: String
  asERC721_not_ends_with: String
  asERC721_not_ends_with_nocase: String
  asERC721_: collection_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [contract_filter]
  or: [contract_filter]
}

enum contract_orderBy {
  id
  asERC721
  asERC721__id
  asERC721__name
  asERC721__symbol
  asERC721__totalSupply
  asERC721__mintPrice
  asERC721__supportsMetadata
  asERC721__totalSales
  asERC721__totalVolume
  asERC721__topSale
}

type currency {
  """ Currency Address """
  id: ID!
  decimals: Int
  name: String!
  symbol: String!
}

input currency_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [currency_filter]
  or: [currency_filter]
}

enum currency_orderBy {
  id
  decimals
  name
  symbol
}

type dailyCollectionSnapshot {
  """ The collection address - The day """
  id: ID!
  """ Unix Day (Timestamp / 86400 * 86400) """
  timestamp: Int
  """ The collection address """
  collection: collection!
  """ The daily volume """
  dailyVolume: BigDecimal!
  """ Number of daily transactions """
  dailyTransactions: Int
  """ Average sale amount for the day """
  dailyAvgSale: BigDecimal!
  """ Daily top sales """
  topSale: BigDecimal!
  """ Daily bottom sales """
  bottomSale: BigDecimal!
}

input dailyCollectionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: collection_filter
  dailyVolume: BigDecimal
  dailyVolume_not: BigDecimal
  dailyVolume_gt: BigDecimal
  dailyVolume_lt: BigDecimal
  dailyVolume_gte: BigDecimal
  dailyVolume_lte: BigDecimal
  dailyVolume_in: [BigDecimal!]
  dailyVolume_not_in: [BigDecimal!]
  dailyTransactions: Int
  dailyTransactions_not: Int
  dailyTransactions_gt: Int
  dailyTransactions_lt: Int
  dailyTransactions_gte: Int
  dailyTransactions_lte: Int
  dailyTransactions_in: [Int!]
  dailyTransactions_not_in: [Int!]
  dailyAvgSale: BigDecimal
  dailyAvgSale_not: BigDecimal
  dailyAvgSale_gt: BigDecimal
  dailyAvgSale_lt: BigDecimal
  dailyAvgSale_gte: BigDecimal
  dailyAvgSale_lte: BigDecimal
  dailyAvgSale_in: [BigDecimal!]
  dailyAvgSale_not_in: [BigDecimal!]
  topSale: BigDecimal
  topSale_not: BigDecimal
  topSale_gt: BigDecimal
  topSale_lt: BigDecimal
  topSale_gte: BigDecimal
  topSale_lte: BigDecimal
  topSale_in: [BigDecimal!]
  topSale_not_in: [BigDecimal!]
  bottomSale: BigDecimal
  bottomSale_not: BigDecimal
  bottomSale_gt: BigDecimal
  bottomSale_lt: BigDecimal
  bottomSale_gte: BigDecimal
  bottomSale_lte: BigDecimal
  bottomSale_in: [BigDecimal!]
  bottomSale_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [dailyCollectionSnapshot_filter]
  or: [dailyCollectionSnapshot_filter]
}

enum dailyCollectionSnapshot_orderBy {
  id
  timestamp
  collection
  collection__id
  collection__name
  collection__symbol
  collection__totalSupply
  collection__mintPrice
  collection__supportsMetadata
  collection__totalSales
  collection__totalVolume
  collection__topSale
  dailyVolume
  dailyTransactions
  dailyAvgSale
  topSale
  bottomSale
}

type hourlyCollectionSnapshot {
  """ The collection address - The hour """
  id: ID!
  """ Unix Hour (Timestamp / 3600 * 3600) """
  timestamp: Int
  """ The collection address """
  collection: collection!
  """ The hourly volume """
  hourlyVolume: BigDecimal!
  """ Number of hourly transactions """
  hourlyTransactions: Int
  """ Average sale amount for the day """
  hourlyAvgSale: BigDecimal!
  """ Hourly top sales """
  topSale: BigDecimal!
  """ Hourly bottom sales """
  bottomSale: BigDecimal!
}

input hourlyCollectionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: collection_filter
  hourlyVolume: BigDecimal
  hourlyVolume_not: BigDecimal
  hourlyVolume_gt: BigDecimal
  hourlyVolume_lt: BigDecimal
  hourlyVolume_gte: BigDecimal
  hourlyVolume_lte: BigDecimal
  hourlyVolume_in: [BigDecimal!]
  hourlyVolume_not_in: [BigDecimal!]
  hourlyTransactions: Int
  hourlyTransactions_not: Int
  hourlyTransactions_gt: Int
  hourlyTransactions_lt: Int
  hourlyTransactions_gte: Int
  hourlyTransactions_lte: Int
  hourlyTransactions_in: [Int!]
  hourlyTransactions_not_in: [Int!]
  hourlyAvgSale: BigDecimal
  hourlyAvgSale_not: BigDecimal
  hourlyAvgSale_gt: BigDecimal
  hourlyAvgSale_lt: BigDecimal
  hourlyAvgSale_gte: BigDecimal
  hourlyAvgSale_lte: BigDecimal
  hourlyAvgSale_in: [BigDecimal!]
  hourlyAvgSale_not_in: [BigDecimal!]
  topSale: BigDecimal
  topSale_not: BigDecimal
  topSale_gt: BigDecimal
  topSale_lt: BigDecimal
  topSale_gte: BigDecimal
  topSale_lte: BigDecimal
  topSale_in: [BigDecimal!]
  topSale_not_in: [BigDecimal!]
  bottomSale: BigDecimal
  bottomSale_not: BigDecimal
  bottomSale_gt: BigDecimal
  bottomSale_lt: BigDecimal
  bottomSale_gte: BigDecimal
  bottomSale_lte: BigDecimal
  bottomSale_in: [BigDecimal!]
  bottomSale_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [hourlyCollectionSnapshot_filter]
  or: [hourlyCollectionSnapshot_filter]
}

enum hourlyCollectionSnapshot_orderBy {
  id
  timestamp
  collection
  collection__id
  collection__name
  collection__symbol
  collection__totalSupply
  collection__mintPrice
  collection__supportsMetadata
  collection__totalSales
  collection__totalVolume
  collection__topSale
  hourlyVolume
  hourlyTransactions
  hourlyAvgSale
  topSale
  bottomSale
}

type sale {
  """ Block Number and Event Id in which the sale event occured"""
  id: ID!
  """ tx that the sale occured in """
  transaction: transaction!
  """ the currency that the sale occred in """
  currency: currency
  """ Timestamp for block """
  timestamp: Int!
  """ Block Number """
  blockNumber: Int!
  """ the amount of the sale """
  amount: BigDecimal!
  """ The marketplace """
  platform: String
}

input sale_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: transaction_filter
  currency: String
  currency_not: String
  currency_gt: String
  currency_lt: String
  currency_gte: String
  currency_lte: String
  currency_in: [String!]
  currency_not_in: [String!]
  currency_contains: String
  currency_contains_nocase: String
  currency_not_contains: String
  currency_not_contains_nocase: String
  currency_starts_with: String
  currency_starts_with_nocase: String
  currency_not_starts_with: String
  currency_not_starts_with_nocase: String
  currency_ends_with: String
  currency_ends_with_nocase: String
  currency_not_ends_with: String
  currency_not_ends_with_nocase: String
  currency_: currency_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  platform: String
  platform_not: String
  platform_gt: String
  platform_lt: String
  platform_gte: String
  platform_lte: String
  platform_in: [String!]
  platform_not_in: [String!]
  platform_contains: String
  platform_contains_nocase: String
  platform_not_contains: String
  platform_not_contains_nocase: String
  platform_starts_with: String
  platform_starts_with_nocase: String
  platform_not_starts_with: String
  platform_not_starts_with_nocase: String
  platform_ends_with: String
  platform_ends_with_nocase: String
  platform_not_ends_with: String
  platform_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [sale_filter]
  or: [sale_filter]
}

enum sale_orderBy {
  id
  transaction
  transaction__id
  transaction__timestamp
  transaction__blockNumber
  transaction__transactionFrom
  transaction__unmatchedTransferCount
  transaction__gasPrice
  currency
  currency__id
  currency__decimals
  currency__name
  currency__symbol
  timestamp
  blockNumber
  amount
  platform
}

type token {
  """ Ethereum / Collection Addrress - Token Id """
  id: ID!
  """ The collection address """
  collection: collection!
  """ The id of the NFT"""
  identifier: BigInt!
  """ The address the currently owns the token """
  owner: account
  """ Transfers involving this token """
  transfers(skip: Int = 0, first: Int = 100, orderBy: transfer_orderBy, orderDirection: OrderDirection, where: transfer_filter): [transfer!]!
}

input token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: collection_filter
  identifier: BigInt
  identifier_not: BigInt
  identifier_gt: BigInt
  identifier_lt: BigInt
  identifier_gte: BigInt
  identifier_lte: BigInt
  identifier_in: [BigInt!]
  identifier_not_in: [BigInt!]
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: account_filter
  transfers_: transfer_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [token_filter]
  or: [token_filter]
}

enum token_orderBy {
  id
  collection
  collection__id
  collection__name
  collection__symbol
  collection__totalSupply
  collection__mintPrice
  collection__supportsMetadata
  collection__totalSales
  collection__totalVolume
  collection__topSale
  identifier
  owner
  owner__id
  transfers
}

type transaction {
  """ the hash of the tx"""
  id: ID!
  """ Timestamp for block """
  timestamp: Int!
  """ Block Number """
  blockNumber: Int!
  """ Address who initiated the transaction """
  transactionFrom: Bytes!
  """ Count of how many transfers were not matched to a sale """
  unmatchedTransferCount: Int!
  """ Transfers that occured within the transaction """
  transfers(skip: Int = 0, first: Int = 100, orderBy: transfer_orderBy, orderDirection: OrderDirection, where: transfer_filter): [transfer!]!
  """ Sale events that occured within the transaction """
  sales(skip: Int = 0, first: Int = 100, orderBy: sale_orderBy, orderDirection: OrderDirection, where: sale_filter): [sale!]
  """ Gas Spent """
  gasPrice: BigInt
}

input transaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  transactionFrom: Bytes
  transactionFrom_not: Bytes
  transactionFrom_gt: Bytes
  transactionFrom_lt: Bytes
  transactionFrom_gte: Bytes
  transactionFrom_lte: Bytes
  transactionFrom_in: [Bytes!]
  transactionFrom_not_in: [Bytes!]
  transactionFrom_contains: Bytes
  transactionFrom_not_contains: Bytes
  unmatchedTransferCount: Int
  unmatchedTransferCount_not: Int
  unmatchedTransferCount_gt: Int
  unmatchedTransferCount_lt: Int
  unmatchedTransferCount_gte: Int
  unmatchedTransferCount_lte: Int
  unmatchedTransferCount_in: [Int!]
  unmatchedTransferCount_not_in: [Int!]
  transfers: [String!]
  transfers_not: [String!]
  transfers_contains: [String!]
  transfers_contains_nocase: [String!]
  transfers_not_contains: [String!]
  transfers_not_contains_nocase: [String!]
  transfers_: transfer_filter
  sales_: sale_filter
  gasPrice: BigInt
  gasPrice_not: BigInt
  gasPrice_gt: BigInt
  gasPrice_lt: BigInt
  gasPrice_gte: BigInt
  gasPrice_lte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [transaction_filter]
  or: [transaction_filter]
}

enum transaction_orderBy {
  id
  timestamp
  blockNumber
  transactionFrom
  unmatchedTransferCount
  transfers
  sales
  gasPrice
}

type transfer {
  """ Block Number and Event Id in which the transfers event occured"""
  id: ID!
  """ Transaction hash in which the transfer event occured"""
  transaction: transaction!
  """ The collection address """
  collection: collection!
  """ The collection addrress - The token id """
  token: token!
  """ The sender address """
  senderAddress: account
  """ The receiver address """
  receiverAddress: account
  """ Timestamp for block """
  timestamp: Int!
  """ Block Number """
  blockNumber: Int!
  """ The amount of ETH paid"""
  amount: BigDecimal!
  """ matched sale event for the transfer """
  matchedSale: sale
}

input transfer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  transaction: String
  transaction_not: String
  transaction_gt: String
  transaction_lt: String
  transaction_gte: String
  transaction_lte: String
  transaction_in: [String!]
  transaction_not_in: [String!]
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_: transaction_filter
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: collection_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: token_filter
  senderAddress: String
  senderAddress_not: String
  senderAddress_gt: String
  senderAddress_lt: String
  senderAddress_gte: String
  senderAddress_lte: String
  senderAddress_in: [String!]
  senderAddress_not_in: [String!]
  senderAddress_contains: String
  senderAddress_contains_nocase: String
  senderAddress_not_contains: String
  senderAddress_not_contains_nocase: String
  senderAddress_starts_with: String
  senderAddress_starts_with_nocase: String
  senderAddress_not_starts_with: String
  senderAddress_not_starts_with_nocase: String
  senderAddress_ends_with: String
  senderAddress_ends_with_nocase: String
  senderAddress_not_ends_with: String
  senderAddress_not_ends_with_nocase: String
  senderAddress_: account_filter
  receiverAddress: String
  receiverAddress_not: String
  receiverAddress_gt: String
  receiverAddress_lt: String
  receiverAddress_gte: String
  receiverAddress_lte: String
  receiverAddress_in: [String!]
  receiverAddress_not_in: [String!]
  receiverAddress_contains: String
  receiverAddress_contains_nocase: String
  receiverAddress_not_contains: String
  receiverAddress_not_contains_nocase: String
  receiverAddress_starts_with: String
  receiverAddress_starts_with_nocase: String
  receiverAddress_not_starts_with: String
  receiverAddress_not_starts_with_nocase: String
  receiverAddress_ends_with: String
  receiverAddress_ends_with_nocase: String
  receiverAddress_not_ends_with: String
  receiverAddress_not_ends_with_nocase: String
  receiverAddress_: account_filter
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  blockNumber: Int
  blockNumber_not: Int
  blockNumber_gt: Int
  blockNumber_lt: Int
  blockNumber_gte: Int
  blockNumber_lte: Int
  blockNumber_in: [Int!]
  blockNumber_not_in: [Int!]
  amount: BigDecimal
  amount_not: BigDecimal
  amount_gt: BigDecimal
  amount_lt: BigDecimal
  amount_gte: BigDecimal
  amount_lte: BigDecimal
  amount_in: [BigDecimal!]
  amount_not_in: [BigDecimal!]
  matchedSale: String
  matchedSale_not: String
  matchedSale_gt: String
  matchedSale_lt: String
  matchedSale_gte: String
  matchedSale_lte: String
  matchedSale_in: [String!]
  matchedSale_not_in: [String!]
  matchedSale_contains: String
  matchedSale_contains_nocase: String
  matchedSale_not_contains: String
  matchedSale_not_contains_nocase: String
  matchedSale_starts_with: String
  matchedSale_starts_with_nocase: String
  matchedSale_not_starts_with: String
  matchedSale_not_starts_with_nocase: String
  matchedSale_ends_with: String
  matchedSale_ends_with_nocase: String
  matchedSale_not_ends_with: String
  matchedSale_not_ends_with_nocase: String
  matchedSale_: sale_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [transfer_filter]
  or: [transfer_filter]
}

enum transfer_orderBy {
  id
  transaction
  transaction__id
  transaction__timestamp
  transaction__blockNumber
  transaction__transactionFrom
  transaction__unmatchedTransferCount
  transaction__gasPrice
  collection
  collection__id
  collection__name
  collection__symbol
  collection__totalSupply
  collection__mintPrice
  collection__supportsMetadata
  collection__totalSales
  collection__totalVolume
  collection__topSale
  token
  token__id
  token__identifier
  senderAddress
  senderAddress__id
  receiverAddress
  receiverAddress__id
  timestamp
  blockNumber
  amount
  matchedSale
  matchedSale__id
  matchedSale__timestamp
  matchedSale__blockNumber
  matchedSale__amount
  matchedSale__platform
}

type weeklyCollectionSnapshot {
  """ The collection address - The week """
  id: ID!
  """ Unix Week (Timestamp / 604800 * 604800) """
  timestamp: Int
  """ The collection address """
  collection: collection!
  """ The monthly volume """
  weeklyVolume: BigDecimal!
  """ Number of monthly transactions """
  weeklyTransactions: Int
  """ Average sale amount for the day """
  weeklyAvgSale: BigDecimal!
  """ Weekly top sales """
  topSale: BigDecimal!
  """ Weekly bottom sales """
  bottomSale: BigDecimal!
}

input weeklyCollectionSnapshot_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  timestamp: Int
  timestamp_not: Int
  timestamp_gt: Int
  timestamp_lt: Int
  timestamp_gte: Int
  timestamp_lte: Int
  timestamp_in: [Int!]
  timestamp_not_in: [Int!]
  collection: String
  collection_not: String
  collection_gt: String
  collection_lt: String
  collection_gte: String
  collection_lte: String
  collection_in: [String!]
  collection_not_in: [String!]
  collection_contains: String
  collection_contains_nocase: String
  collection_not_contains: String
  collection_not_contains_nocase: String
  collection_starts_with: String
  collection_starts_with_nocase: String
  collection_not_starts_with: String
  collection_not_starts_with_nocase: String
  collection_ends_with: String
  collection_ends_with_nocase: String
  collection_not_ends_with: String
  collection_not_ends_with_nocase: String
  collection_: collection_filter
  weeklyVolume: BigDecimal
  weeklyVolume_not: BigDecimal
  weeklyVolume_gt: BigDecimal
  weeklyVolume_lt: BigDecimal
  weeklyVolume_gte: BigDecimal
  weeklyVolume_lte: BigDecimal
  weeklyVolume_in: [BigDecimal!]
  weeklyVolume_not_in: [BigDecimal!]
  weeklyTransactions: Int
  weeklyTransactions_not: Int
  weeklyTransactions_gt: Int
  weeklyTransactions_lt: Int
  weeklyTransactions_gte: Int
  weeklyTransactions_lte: Int
  weeklyTransactions_in: [Int!]
  weeklyTransactions_not_in: [Int!]
  weeklyAvgSale: BigDecimal
  weeklyAvgSale_not: BigDecimal
  weeklyAvgSale_gt: BigDecimal
  weeklyAvgSale_lt: BigDecimal
  weeklyAvgSale_gte: BigDecimal
  weeklyAvgSale_lte: BigDecimal
  weeklyAvgSale_in: [BigDecimal!]
  weeklyAvgSale_not_in: [BigDecimal!]
  topSale: BigDecimal
  topSale_not: BigDecimal
  topSale_gt: BigDecimal
  topSale_lt: BigDecimal
  topSale_gte: BigDecimal
  topSale_lte: BigDecimal
  topSale_in: [BigDecimal!]
  topSale_not_in: [BigDecimal!]
  bottomSale: BigDecimal
  bottomSale_not: BigDecimal
  bottomSale_gt: BigDecimal
  bottomSale_lt: BigDecimal
  bottomSale_gte: BigDecimal
  bottomSale_lte: BigDecimal
  bottomSale_in: [BigDecimal!]
  bottomSale_not_in: [BigDecimal!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [weeklyCollectionSnapshot_filter]
  or: [weeklyCollectionSnapshot_filter]
}

enum weeklyCollectionSnapshot_orderBy {
  id
  timestamp
  collection
  collection__id
  collection__name
  collection__symbol
  collection__totalSupply
  collection__mintPrice
  collection__supportsMetadata
  collection__totalSales
  collection__totalVolume
  collection__topSale
  weeklyVolume
  weeklyTransactions
  weeklyAvgSale
  topSale
  bottomSale
}

type wethTransaction {
  """ Hash for weth contained transaction """
  id: ID!
}

input wethTransaction_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [wethTransaction_filter]
  or: [wethTransaction_filter]
}

enum wethTransaction_orderBy {
  id
}